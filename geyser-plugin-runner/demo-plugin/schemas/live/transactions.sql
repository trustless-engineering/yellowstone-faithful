DROP TABLE IF EXISTS transactions;

CREATE TABLE transactions (
    ingest_time Int64,
    -- epoch timestamp in milliseconds
    signature String,
    -- unique transaction signature
    signatures Array(String),
    -- list of signatures associated with the transaction
    signers Array(String),
    -- list of signers for the transaction
    is_vote Boolean,
    -- indicates if the transaction is a vote
    `index` UInt64,
    -- transaction index within the slot
    num_required_signatures UInt8,
    -- number of required signatures
    num_readonly_signed_accounts UInt8,
    -- number of readonly signed accounts
    num_readonly_unsigned_accounts UInt8,
    -- number of readonly unsigned accounts
    account_keys Array(String),
    -- list of account keys involved in the transaction
    recent_blockhash String,
    -- recent blockhash used in the transaction
    instructions Array(
        Tuple(
            program_id_index UInt8,
            -- index of the program ID in account_keys
            accounts Array(String),
            -- list of accounts involved in the instruction
            data String -- instruction data encoded in base58
        )
    ),
    -- list of instructions in the transaction
    success Boolean,
    -- indicates if the transaction was successful
    error String,
    -- error message if the transaction failed
    fee Int64,
    -- fee paid for the transaction
    pre_balances Array(Int64),
    -- pre-transaction balances of accounts
    post_balances Array(Int64),
    -- post-transaction balances of accounts
    inner_instructions Array(
        Tuple(
            accounts Array(String),
            -- accounts involved in the inner instruction
            data String -- inner instruction data encoded in base58
        )
    ),
    -- list of inner instructions
    log_messages Array(String),
    -- log messages generated by the transaction
    pre_token_balances Array(
        Tuple(
            account_index Int64,
            -- account index
            mint String,
            -- token mint
            owner String,
            -- token owner
            amount String,
            -- token amount before the transaction (high precision)
            decimals Int64 -- number of decimal places
        )
    ),
    -- pre-transaction token balances
    post_token_balances Array(
        Tuple(
            account_index Int64,
            -- account index
            mint String,
            -- token mint
            owner String,
            -- token owner
            amount String,
            -- token amount after the transaction (high precision)
            decimals Int64 -- number of decimal places
        )
    ),
    -- post-transaction token balances
    rewards Array(
        Tuple(
            pubkey String,
            -- public key of the reward recipient
            lamports Int64,
            -- lamports rewarded
            post_balance Int64,
            -- balance after the reward
            reward_type Enum8(
                'Fee' = 1,
                'Rent' = 2,
                'Staking' = 3,
                'Voting' = 4
            ),
            -- type of reward
            commission UInt8 -- commission percentage
        )
    ),
    -- list of rewards associated with the transaction
    loaded_addresses Array(String),
    -- list of loaded addresses
    return_data Array(
        Tuple(
            program_id String,
            -- program ID associated with the return data
            data String -- return data encoded in base58
        )
    ),
    -- list of return data tuples
    compute_units_consumed Int64,
    -- compute units consumed by the transaction
    PRIMARY KEY signature -- primary key set to signature for uniqueness
) ENGINE = MergeTree() SETTINGS index_granularity = 8192;